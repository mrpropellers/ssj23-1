// Based on SplineMesh.ExampleGrowingRoot

using System;
using System.Collections.Generic;
using LeftOut.Extensions;
using UnityEngine;
using SplineMesh;
using Unity.Mathematics;
using Random = Unity.Mathematics.Random;
using LeftOut.Toolkit;

namespace LeftOut.GameJam.Bonsai
{
    [RequireComponent(typeof(Spline))]
    [ExecuteAlways]
    public class GrowingTreeLimb : MonoBehaviour
    {
        // Scale can't start at zero for some reason, so need to set an initial size
        const float k_InitialScale = 0.01f;

        GameObject m_Generated;
        Spline m_Spline;
        MeshBender m_MeshBender;
        MeshRenderer m_Renderer;
        float m_LastGrowthTarget;
        float m_CurrentGrowthProgress;
        float m_CurrentGrowthTarget;
        double m_LastGrowStartTime;
        double m_GrowthPerSecond;
        List<GrowingTreeLimb> m_Branches;

        [SerializeField]
        Leaves m_Leaves;
        [SerializeField]
        Mesh m_Mesh;
        [SerializeField]
        Material m_Material;
        [SerializeField]
        Vector3 m_MeshRotation;
        [SerializeField]
        Vector3 m_MeshScale;
        [SerializeField]
        float m_StartScale = 1f;

        internal int Generation = -1;

        bool HasLeaves => m_Leaves != null;
        bool ShouldGrowLeaves => !IsCurrentlyGrowing && HasLeaves &&
            (float)m_Leaves.TargetGrowthStage / m_Leaves.NumStages < m_LastGrowthTarget;
        
        internal bool IsInitialized { get; private set; }
        // Returns true IFF the branch is currently in a growth coroutine - if you want to know whether a branch
        // CAN grow, check IsFullyGrown
        internal bool IsCurrentlyGrowing => Math.Abs(m_LastGrowthTarget - m_CurrentGrowthTarget) > float.Epsilon;
        internal bool IsFullyGrown => Math.Abs(m_LastGrowthTarget - 1f) < float.Epsilon;

        // value in units of distance indicating how far along the path the limb has grown
        internal float CurrentLength => m_Spline.Length * m_CurrentGrowthProgress;
        
        //internal GrowingTreeLimb Parent { get; private set; }
        internal IEnumerable<GrowingTreeLimb> Branches
        {
            get
            {
                for (var i = m_Branches.Count - 1; i >= 0; --i)
                {
                    var branch = m_Branches[i];
                    if (branch == null)
                    {
                        m_Branches.RemoveAt(i);
                    }
                    else
                    {
                        yield return branch;
                    }
                }
            }
        }

        public void Prune()
        {
            // Because limbs in Branches are also children of this branch, we probably don't need to recursively
            // Prune all of them... Anything we do to the Parent will carry through...
            // foreach (var limb in Branches)
            // {
            //     limb.Prune();
            // }
            Destroy(gameObject);
        }
        
        void Start()
        {
            if (IsInitialized)
            {
                Debug.LogWarning($"{name} was initialized before Start was called - something might be wrong.");
            }

            Init();
        }

        void Init()
        {
            DebugExtras.LogWhenPaused("Initializing.", this);
            if (m_Branches is { Count: > 0 })
            {
                Debug.LogWarning($"{name} has active Branches - you'll need to manually delete them.");
            }
            m_Branches = new List<GrowingTreeLimb>();
            m_LastGrowthTarget = k_InitialScale;
            m_CurrentGrowthTarget = m_LastGrowthTarget;
            var generatedName = "generated by " + GetType().Name;
            var generatedTransform = transform.Find(generatedName);
            m_Generated = generatedTransform != null
                ? generatedTransform.gameObject
                : UOUtility.Create(generatedName, gameObject,
                    typeof(MeshFilter),
                    typeof(MeshRenderer),
                    typeof(MeshBender));

            m_Renderer = m_Generated.GetComponent<MeshRenderer>();
            m_Renderer.material = m_Material;

            m_MeshBender = m_Generated.GetComponent<MeshBender>();
            m_Spline = GetComponent<Spline>();

            m_MeshBender.Source = SourceMesh.Build(m_Mesh).Rotate(Quaternion.Euler(m_MeshRotation)).Scale(m_MeshScale);
            m_MeshBender.Mode = MeshBender.FillingMode.StretchToInterval;
            //m_MeshBender.SetInterval(m_Spline, 0, k_InitialScale);
            Contort(k_InitialScale);
            IsInitialized = true;
        }

        void Update()
        {
            if (!IsInitialized)
            {
                return;
            }
            if (IsFullyGrown)
            {
                Debug.Log($"This branch is fully grown. Disabling self.");
                enabled = false;
                return;
            }

            if (IsCurrentlyGrowing)
            {
                DoGrowUpdate();
            }
        }

        internal void Reset()
        {
            Init();
        }

        internal void ShuffleBranchOrder() => m_Branches.Shuffle();

        internal int CountGrowingBranches()
        {
            // Add self to count if branch is not fully grown
            var count = IsFullyGrown ? 0 : 1;
            
            foreach (var branch in Branches)
            {
                count += branch.CountGrowingBranches();
            }

            return count;
        }

        internal CurveSample SampleNewBranchLocation(ref Random random)
        {
            var distance = random.NextFloat((float)CurrentLength);
            return m_Spline.GetSampleAtDistance(distance);
        }

        internal GrowingTreeLimb SproutBranch(GrowingTreeLimb prefab, Vector3 position, Quaternion orientation)
        {
            var sprout =
                Instantiate(prefab, position, orientation, transform);
            sprout.Generation = Generation + 1;
            m_Branches.Add(sprout);
            return sprout;
        }

        internal void GrowByProgress(double timeInterval, float progressDelta)
        {
            if (IsCurrentlyGrowing)
            {
                Debug.LogError("You are calling Grow too fast. Wait until previous has finished.");
                return;
            }

            if (!IsFullyGrown)
            {
                m_LastGrowStartTime = Time.timeAsDouble;
                m_GrowthPerSecond = 1.0 / timeInterval;

                if (progressDelta + m_CurrentGrowthTarget > 1f)
                {
                    Debug.Log("Growth target is flowing over; clamping.");
                }

                m_CurrentGrowthTarget = math.clamp(m_CurrentGrowthTarget + progressDelta, m_LastGrowthTarget, 1.0f);
            }
            
            // No reason to check for branches if this instance is brand new
            if (!IsInitialized)
            {
                return;
            }
            
            foreach (var branch in Branches)
            {
                branch.GrowByProgress(timeInterval, progressDelta);
            }
        }

        void DoGrowUpdate()
        {
            if (!IsInitialized)
            {
                Debug.LogWarning("Tried to grow before initializing. Initializing now (this may break).");
                Init();
            }

            var timeElapsed = Time.timeAsDouble - m_LastGrowStartTime;
            var t = math.clamp(timeElapsed * m_GrowthPerSecond, 0.0, 1.0);
            m_CurrentGrowthProgress = Mathf.Lerp(m_LastGrowthTarget, m_CurrentGrowthTarget, (float)t);
            Contort(m_CurrentGrowthProgress);
            if (Math.Abs(t - 1.0) < float.Epsilon)
            {
                m_LastGrowthTarget = m_CurrentGrowthTarget;
            }

            if (HasLeaves)
            {
                m_Leaves.transform.localPosition = m_Spline.GetSampleAtDistance(CurrentLength).location;
            }
            if (ShouldGrowLeaves)
            {
                m_Leaves.GrowNextStage();
            }
        }

        void Contort(float t)
        {
            var nodeDistance = 0f;

            for (var i = 0; i < m_Spline.nodes.Count; ++i)
            {
                var node = m_Spline.nodes[i];
                var nodeDistanceRate = nodeDistance / m_Spline.Length;
                var nodeScale = m_StartScale * (t - nodeDistanceRate);
                node.Scale = new Vector2(nodeScale, nodeScale);
                if (i < m_Spline.curves.Count)
                { 
                    nodeDistance += m_Spline.curves[i].Length;
                }
            }

            if (m_Generated != null)
            {
                m_MeshBender.SetInterval(m_Spline, 0, m_Spline.Length * t);
                m_MeshBender.ComputeIfNeeded();
            }

            // if (m_IsHidingMesh)
            // {
            //     m_Renderer.enabled = true;
            //     m_IsHidingMesh = false;
            // }
        }
    }
}
